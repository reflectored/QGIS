SET statement_timeout = 0;
SET client_encoding = 'UTF8';


-- Create "qgis_test" schema
DROP SCHEMA IF EXISTS qgis_test CASCADE;
CREATE SCHEMA qgis_test;
GRANT ALL ON SCHEMA qgis_test TO public;
ALTER DEFAULT PRIVILEGES IN SCHEMA qgis_test GRANT ALL ON TABLES TO public;



-- Create "CamelCaseSchema" schema
DROP SCHEMA IF EXISTS "CamelCaseSchema" CASCADE;
CREATE SCHEMA "CamelCaseSchema";
GRANT ALL ON SCHEMA "CamelCaseSchema" TO public;
ALTER DEFAULT PRIVILEGES IN SCHEMA "CamelCaseSchema" GRANT ALL ON TABLES TO public;


-- qgis_text.some_data table
CREATE TABLE qgis_test."some_data" (
    pk integer generated by default as identity(1,1) NOT NULL,
    cnt integer,
    name text DEFAULT 'qgis',
    name2 text DEFAULT 'qgis',
    num_char text,
    dt timestamp without time zone,
    "date" date,
    "time" time without time zone,
    geom geometry
);

COMMENT ON TABLE qgis_test."some_data" IS 'QGIS Test Table';


-- Table with polygons inside
CREATE TABLE qgis_test."some_poly_data" (
    pk integer generated by default as identity(1,1)  NOT NULL,
    geom geometry
);

CREATE OR REPLACE VIEW qgis_test.some_poly_data_view
  AS
    SELECT *
    FROM qgis_test.some_poly_data;

-- Insert values into qgis_test.some_data

INSERT INTO qgis_test."some_data" (pk,cnt, name, name2, num_char, dt, "date", "time", geom) VALUES
(5, -200, NULL, 'NuLl', '5', TIMESTAMP '2020-05-04 12:13:14', '2020-05-02', '12:13:01', '0101000020E61000001D5A643BDFC751C01F85EB51B88E5340'),
(3, 300, 'Pear', 'PEaR', '3', NULL, NULL, NULL, NULL),
(1,  100, 'Orange', 'oranGe', '1', TIMESTAMP '2020-05-03 12:13:14', '2020-05-03', '12:13:14', '0101000020E61000006891ED7C3F9551C085EB51B81E955040'),
(2,  200, 'Apple', 'Apple', '2', TIMESTAMP '2020-05-04 12:14:14', '2020-05-04', '12:14:14', '0101000020E6100000CDCCCCCCCC0C51C03333333333B35140'),
(4,  400, 'Honey', 'Honey', '4', TIMESTAMP '2021-05-04 13:13:14', '2021-05-04', '13:13:14', '0101000020E610000014AE47E17A5450C03333333333935340')
;

-- Insert values into qgis_test.some_poly_data

INSERT INTO qgis_test."some_poly_data" (pk, geom) VALUES
(1, ST_GeomFromText('Polygon ((-69.0 81.4, -69.0 80.2, -73.7 80.2, -73.7 76.3, -74.9 76.3, -74.9 81.4, -69.0 81.4))', 4326) ),
(2, ST_GeomFromText('Polygon ((-67.6 81.2, -66.3 81.2, -66.3 76.9, -67.6 76.9, -67.6 81.2))', 4326) ),
(3, ST_GeomFromText('Polygon ((-68.4 75.8, -67.5 72.6, -68.6 73.7, -70.2 72.9, -68.4 75.8))', 4326) ),
(4, NULL)
;

-- Materialized view
CREATE MATERIALIZED VIEW qgis_test.some_poly_data_mat_view
    AS
      SELECT *
      FROM qgis_test.some_poly_data;

-- Provider check with compound key

CREATE TABLE qgis_test."some_data_compound" (
    pk integer NOT NULL,
    cnt integer,
    name text DEFAULT 'qgis',
    name2 text DEFAULT 'qgis',
    num_char text,
    dt timestamp without time zone,
    "date" date,
    "time" time without time zone,
    geom geometry,
    key1 integer,
    key2 integer,
    PRIMARY KEY(key1, key2)
);

INSERT INTO qgis_test."some_data_compound" ( key1, key2, pk, cnt, name, name2, num_char, dt, "date", "time", geom) VALUES
(1, 1, 5, -200, NULL, 'NuLl', '5', TIMESTAMP '2020-05-04 12:13:14', '2020-05-02', '12:13:01', '0101000020E61000001D5A643BDFC751C01F85EB51B88E5340'),
(1, 2, 3,  300, 'Pear', 'PEaR', '3', NULL, NULL, NULL, NULL),
(2, 1, 1,  100, 'Orange', 'oranGe', '1', TIMESTAMP '2020-05-03 12:13:14', '2020-05-03', '12:13:14', '0101000020E61000006891ED7C3F9551C085EB51B81E955040'),
(2, 2, 2,  200, 'Apple', 'Apple', '2', TIMESTAMP '2020-05-04 12:14:14', '2020-05-04', '12:14:14', '0101000020E6100000CDCCCCCCCC0C51C03333333333B35140'),
(2, 3, 4,  400, 'Honey', 'Honey', '4', TIMESTAMP '2021-05-04 13:13:14', '2021-05-04', '13:13:14', '0101000020E610000014AE47E17A5450C03333333333935340')
;

-- Create qgis_test.data_times table
CREATE TABLE qgis_test.date_times(
       id int,
       date_field date,
       time_field time,
       datetime_field timestamp without time zone,
       PRIMARY KEY(id)
);

INSERT INTO qgis_test.date_times values (1, '2004-03-04'::date, '13:41:52'::time, '2004-03-04 13:41:52'::timestamp without time zone );




-- Table with 2D polygons
CREATE TABLE qgis_test.p2d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.p2d values (1, st_geomfromtext('Polygon((0 0,1 0,1 1,0 1,0 0))',4326));

-- Table with 3DZ polygons
CREATE TABLE qgis_test.p3d(
       id int primary key,
       geom geometry
);
INSERT INTO qgis_test.p3d values 
(1, st_geomfromtext('Polygon z((0 0 0,1 0 0,1 1 0,0 1 0,0 0 0))',4326));

-- Table with 3DZ multi-polygons
CREATE TABLE qgis_test.mp3d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.mp3d values (1, st_geomfromtext('Multipolygon Z(((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0)),((0 0 1,1 0 1,1 1 1,0 1 1,0 0 1)),((0 0 0,0 0 1,0 1 1,0 1 0,0 0 0)),((0 1 0,0 1 1,1 1 1,1 1 0,0 1 0)),((1 1 0,1 1 1,1 0 1,1 0 0,1 1 0)),((1 0 0,1 0 1,0 0 1,0 0 0,1 0 0)))',4326));

-- Table with 2D points
CREATE TABLE qgis_test.pt2d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.pt2d values (1, st_geomfromtext('Point(0 0)',4326));

-- Table with 3DZ points
CREATE TABLE qgis_test.pt3d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.pt3d values (1, st_geomfromtext('Point z (0 0 0)',4326));

-- Table with 2D linestrings
CREATE TABLE qgis_test.ls2d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.ls2d values (1, st_geomfromtext('Linestring(0 0, 1 1)',4326));

-- Table with 3DZ linestring
CREATE TABLE qgis_test.ls3d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.ls3d values (1, st_geomfromtext('Linestring z (0 0 0, 1 1 1)',4326));

-- Table with 2D multipoints
CREATE TABLE qgis_test.mpt2d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.mpt2d values (1, st_geomfromtext('MultiPoint((0 0),(1 1))',4326));

-- Table with 3DZ multipoints
CREATE TABLE qgis_test.mpt3d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.mpt3d values (1, st_geomfromtext('MultiPoint z ((0 0 0),(1 1 1))',4326));

-- Table with 2D multilinestrings
CREATE TABLE qgis_test.mls2d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.mls2d values (1, st_geomfromtext('MultiLineString((0 0, 1 1),(2 2, 3 3))',4326));

-- Table with 3D multilinestrings
CREATE TABLE qgis_test.mls3d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.mls3d values (1, st_geomfromtext('MultiLineString z((0 0 0, 1 1 1),(2 2 2, 3 3 3))',4326));


-- Test of 4D geometries (with Z and M values)

CREATE TABLE qgis_test.pt4d(
       id int primary key,
       geom geometry
);

INSERT INTO qgis_test.pt4d values (1, st_geomfromtext('Point zm (1 2 3 4)',4326));



--------------------------------------
-- Temporary table for testing renaming fields
--

CREATE TABLE qgis_test.rename_table
(
  gid int identity(1,1) NOT NULL,
  field1 text,
  field2 text
);

INSERT INTO qgis_test.rename_table (field1,field2) VALUES ('a','b');

--------------------------------------
-- Table for editor widget types
--

DROP TABLE IF EXISTS public.qgis_editor_widget_styles;

CREATE TABLE public.qgis_editor_widget_styles
(
  schema_name TEXT NOT NULL,
  table_name TEXT NOT NULL,
  field_name TEXT NOT NULL,
  type TEXT NOT NULL,
  config TEXT,
  PRIMARY KEY(table_name, field_name)
);

CREATE TABLE qgis_test.widget_styles(
       id int PRIMARY KEY,
       fld1 TEXT,
       fld2 TEXT
);

INSERT INTO qgis_editor_widget_styles VALUES
('qgis_test', 'widget_styles', 'fld1', 'FooEdit', '<config type="Map"><Option name="param1" value="value1" type="QString"/><Option name="param2" value="2" type="QString"/></config>');

--------------------------------------
-- Table for boolean
--

CREATE TABLE qgis_test.boolean_table
(
  id int PRIMARY KEY,
  fld1 BOOLEAN
);

INSERT INTO qgis_test.boolean_table VALUES
(1, TRUE),
(2, FALSE),
(3, NULL);

---------------------------------------------
--
-- Table and view for tests on  checkPrimaryKeyUnicity
--

DROP TABLE IF EXISTS qgis_test.b21839_pk_unicity CASCADE;
CREATE TABLE qgis_test.b21839_pk_unicity
(
  pk int generated by default as identity(1,1) NOT NULL,
  an_int integer NOT NULL,
  a_unique_int integer NOT NULL,
  geom geometry,
  CONSTRAINT b21839_pk_unicity_pkey PRIMARY KEY (pk)
);


INSERT INTO qgis_test.b21839_pk_unicity(
            pk, an_int, a_unique_int , geom)
    VALUES (1, 1, 1, ST_GeomFromText('point( 1 1)'));


INSERT INTO qgis_test.b21839_pk_unicity(
            pk, an_int, a_unique_int, geom)
    VALUES (2, 1, 2, ST_GeomFromText('point( 1 3)'));



CREATE OR REPLACE VIEW qgis_test.b21839_pk_unicity_view AS
 SELECT b21839_pk_unicity.pk,
    b21839_pk_unicity.an_int,
    b21839_pk_unicity.a_unique_int,
    b21839_pk_unicity.geom
   FROM qgis_test.b21839_pk_unicity;


---------------------------------------------
--
-- Table and views for tests on QgsAbstractProviderConnection
--

CREATE TABLE qgis_test.geometries_table (name VARCHAR primary key, geom GEOMETRY);

INSERT INTO qgis_test.geometries_table VALUES
  ('Point', st_geomfromtext('POINT(0 0)')),
  ('Point4326', st_geomfromtext('POINT(7 45)',4326)),
  ('Point3857', st_geomfromtext('POINT(100 100)',3857)),
  ('Linestring', st_geomfromtext('LINESTRING(0 0, 1 1, 2 1, 2 2)')),
  ('Polygon', st_geomfromtext('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))')),
  ('PolygonWithHole', st_geomfromtext('POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(1 1, 1 2, 2 2, 2 1, 1 1))')),
  ('Collection', st_geomfromtext('GEOMETRYCOLLECTION(POINT(2 0),POLYGON((0 0, 1 0, 1 1, 0 1, 0 0)))'));

CREATE VIEW qgis_test.geometries_view AS (SELECT * FROM qgis_test.geometries_table);

CREATE TABLE qgis_test.geometryless_table (name VARCHAR, value INTEGER);




---------------------------------------------
--
-- Geometryless view
--
CREATE VIEW qgis_test.b32523 AS
  SELECT pk, random()
  FROM qgis_test.some_poly_data;


----------------------------------------------
--
-- IDENTITY pk
-- 
--

CREATE TABLE qgis_test.b29560 (
    gid int8 IDENTITY(1,1) PRIMARY KEY,
    geom geometry
);

INSERT INTO qgis_test.b29560 (geom)
VALUES (st_geomfromtext('polygon empty'));

---------------------------------------------
--
-- Aspatial table with default values
--

CREATE TABLE qgis_test.test_table_default_values (
    id int generated by default as identity(1,1) primary key,
    comment TEXT,
    created_at_01 text DEFAULT now(),
    created_at_02 text DEFAULT CURRENT_TIMESTAMP,
    anumber INTEGER DEFAULT 123,
    atext TEXT default 'My default'
);

-----------------------------
-- Table for constraint tests
-- on Redshift constraints are not enforced but they can be given as a hint to the provider
-- it is the responsibility of the user to make sure the constraints are respected

DROP TABLE IF EXISTS qgis_test.constraints;
CREATE TABLE qgis_test.constraints
(
  gid int generated by default as identity(1,1) NOT NULL PRIMARY KEY, -- implicit unique key
  val int, -- unique constraint
  name text NOT NULL , 
  description text,
  CONSTRAINT constraint_val UNIQUE (val),
  CONSTRAINT constraint_val2 UNIQUE (val), -- create double unique constraint for test
  CONSTRAINT unique_name UNIQUE(name)
);



-- Ordinary tables and views
CREATE TABLE qgis_test.bikes
(
  pk int generated by default as identity(1,1) NOT NULL,
  name character varying(255)
);

CREATE OR REPLACE VIEW qgis_test.bikes_view
  AS
    SELECT *
    FROM qgis_test.bikes;



-- Additional tables
CREATE TABLE qgis_test.determine_pkey
(
  pk int identity NOT NULL,
  name text
);

DROP TABLE IF EXISTS qgis_test.bigint_pk;

CREATE TABLE qgis_test.bigint_pk (
  pk bigint generated by default as identity(1,1) NOT NULL PRIMARY KEY,
  value varchar(16),
  bigint_attribute bigint,
  bigint_attribute_def bigint DEFAULT 42,
  geom geometry
);

INSERT INTO qgis_test.bigint_pk (value, geom)
  VALUES
    ('first value', ST_SetSRID(ST_MakePoint(-60.1, 1.0), 4326)),
    ('second value', ST_SetSRID(ST_MakePoint(-61.1, -1.0), 4326));

INSERT INTO qgis_test.bigint_pk (pk, value, geom)
  VALUES
    (0, 'zero value', ST_SetSRID(ST_MakePoint(-49.1, 1.0), 4326)),
    (-1, 'negative value', ST_SetSRID(ST_MakePoint(-45.1, 1.0), 4326));

DROP TABLE IF EXISTS qgis_test.bigint_non_first_pk;

CREATE TABLE qgis_test.bigint_non_first_pk (
  value varchar(16),
  pk bigint generated by default as identity(1,1)  NOT NULL PRIMARY KEY,
  geom geometry
);

INSERT INTO qgis_test.bigint_non_first_pk (value, geom)
  VALUES
    ('first value', ST_SetSRID(ST_MakePoint(-60.1, 1.0), 4326)),
    ('second value', ST_SetSRID(ST_MakePoint(-61.1, -1.0), 4326));

INSERT INTO qgis_test.bigint_non_first_pk (pk, value, geom)
  VALUES
    (0, 'zero value', ST_SetSRID(ST_MakePoint(-49.1, 1.0), 4326)),
    (-1, 'negative value', ST_SetSRID(ST_MakePoint(-45.1, 1.0), 4326));

DROP TABLE IF EXISTS qgis_test.bigint_composite_pk;

CREATE TABLE qgis_test.bigint_composite_pk (
  intid BIGINT NOT NULL,
  charid varchar(8) NOT NULL,
  value varchar(16),
  geom geometry,
  PRIMARY KEY(intid, charid)
);

INSERT INTO qgis_test.bigint_composite_pk (intid, charid, value, geom)
  VALUES
    (1, '1', 'first value', ST_SetSRID(ST_MakePoint(-60.1, 1.0), 4326)),
    (2, '2', 'second value', ST_SetSRID(ST_MakePoint(-61.1, -0.5), 4326)),
    (0, '0', 'zero value', ST_SetSRID(ST_MakePoint(-58.1, -0.5), 4326)),
    (-1, '-1', 'negative value', ST_SetSRID(ST_MakePoint(-58.1, -0.5), 4326));

DROP TABLE IF EXISTS qgis_test.provider_bigint_single_pk;

CREATE TABLE qgis_test.provider_bigint_single_pk (
    pk bigint NOT NULL,
    cnt integer,
    name text DEFAULT 'qgis',
    name2 text DEFAULT 'qgis',
    num_char text,
    dt timestamp without time zone,
    "date" date,
    "time" time without time zone,
    geom geometry,
    key1 integer,
    key2 integer,
    PRIMARY KEY(pk)
);

INSERT INTO qgis_test.provider_bigint_single_pk  ( key1, key2, pk, cnt, name, name2, num_char, dt, "date", "time", geom) VALUES
(1, 1, 5, -200, NULL, 'NuLl', '5', TIMESTAMP '2020-05-04 12:13:14', '2020-05-02', '12:13:01', st_geomfromewkb('0101000020E61000001D5A643BDFC751C01F85EB51B88E5340')),
(1, 2, 3,  300, 'Pear', 'PEaR', '3', NULL, NULL, NULL, NULL),
(2, 1, 1,  100, 'Orange', 'oranGe', '1', TIMESTAMP '2020-05-03 12:13:14', '2020-05-03', '12:13:14', st_geomfromewkb('0101000020E61000006891ED7C3F9551C085EB51B81E955040')),
(2, 2, 2,  200, 'Apple', 'Apple', '2', TIMESTAMP '2020-05-04 12:14:14', '2020-05-04', '12:14:14', st_geomfromewkb('0101000020E6100000CDCCCCCCCC0C51C03333333333B35140')),
(2, 3, 4,  400, 'Honey', 'Honey', '4', TIMESTAMP '2021-05-04 13:13:14', '2021-05-04', '13:13:14', st_geomfromewkb('0101000020E610000014AE47E17A5450C03333333333935340'))
;

DROP TABLE IF EXISTS qgis_test.provider_bigint_nonfirst_pk;

CREATE TABLE qgis_test.provider_bigint_nonfirst_pk (
    zeroth_field integer,
    primkey bigint NOT NULL,
    cnt integer,
    name text DEFAULT 'qgis',
    name2 text DEFAULT 'qgis',
    num_char text,
    dt timestamp without time zone,
    "date" date,
    "time" time without time zone,
    geom geometry,
    key1 integer,
    key2 integer,
    PRIMARY KEY(primkey)
);

INSERT INTO qgis_test.provider_bigint_nonfirst_pk  (zeroth_field, key1, key2, primkey, cnt, name, name2, num_char, dt, "date", "time", geom) VALUES
(-3, 1, 1, 5, -200, NULL, 'NuLl', '5', TIMESTAMP '2020-05-04 12:13:14', '2020-05-02', '12:13:01', st_geomfromewkb('0101000020E61000001D5A643BDFC751C01F85EB51B88E5340')),
(-2, 1, 2, 3,  300, 'Pear', 'PEaR', '3', NULL, NULL, NULL, NULL),
(-1, 2, 1, 1,  100, 'Orange', 'oranGe', '1', TIMESTAMP '2020-05-03 12:13:14', '2020-05-03', '12:13:14', st_geomfromewkb('0101000020E61000006891ED7C3F9551C085EB51B81E955040')),
(0, 2, 2, 2,  200, 'Apple', 'Apple', '2', TIMESTAMP '2020-05-04 12:14:14', '2020-05-04', '12:14:14', st_geomfromewkb('0101000020E6100000CDCCCCCCCC0C51C03333333333B35140')),
(1, 2, 3, 4,  400, 'Honey', 'Honey', '4', TIMESTAMP '2021-05-04 13:13:14', '2021-05-04', '13:13:14', st_geomfromewkb('0101000020E610000014AE47E17A5450C03333333333935340'))
;

DROP TABLE IF EXISTS qgis_test.tb_test_compound_pk;

CREATE TABLE qgis_test.tb_test_compound_pk
(
    pk1 INTEGER,
    pk2 BIGINT,
    value VARCHAR(16),
    geom geometry,
    PRIMARY KEY (pk1, pk2)
);

INSERT INTO qgis_test.tb_test_compound_pk (pk1, pk2, value, geom) VALUES
    (1, 1, 'test 1', ST_SetSRID(ST_Point(-47.930, -15.818), 4326)),
    (1, 2, 'test 2', ST_SetSRID(ST_Point(-47.887, -15.864), 4326)),
    (2, 1, 'test 3', ST_SetSRID(ST_Point(-47.902, -15.763), 4326)),
    (2, 2, 'test 4', ST_SetSRID(ST_Point(-47.952, -15.781), 4326));

CREATE TABLE qgis_test.tb_test_composite_float_pk
(
    pk1 INTEGER,
    pk2 BIGINT,
    pk3 REAL,
    value VARCHAR(16),
    geom geometry,
    PRIMARY KEY (pk1, pk2, pk3)
);

INSERT INTO qgis_test.tb_test_composite_float_pk (pk1, pk2, pk3, value, geom) VALUES
    (1, 1, 1.0,         'test 1', ST_SetSRID(ST_Point(-47.930, -15.818), 4326)),
    (1, 2, 3.141592741, 'test 2', ST_SetSRID(ST_Point(-47.887, -15.864), 4326)),
    (2, 2, 2.718281828, 'test 3', ST_SetSRID(ST_Point(-47.902, -15.763), 4326)),
    (2, 2, 1.0,         'test 4', ST_SetSRID(ST_Point(-47.952, -15.781), 4326));

CREATE TABLE qgis_test.tb_test_float_pk
(
    pk REAL PRIMARY KEY,
    value VARCHAR(16),
    geom geometry
);
-- those values (pi, Euler's, and a third) will be truncated/rounded to fit
-- Redshift's internal type size. REAL is IEEE-754 4 bytes (32 bit).
INSERT INTO qgis_test.tb_test_float_pk (pk, value, geom) VALUES
    (3.141592653589793238462643383279502884197169399375105820974944592307816406286, 'first teste', ST_SetSRID(ST_Point(-47.887, -15.864), 4326)),
    (2.718281828459045235360287471352662497757247093699959574966967627724076630353, 'second test', ST_SetSRID(ST_Point(-47.902, -15.763), 4326)),
    (1.333333333333333333333333333333333333333333333333333333333333333333333333333, 'third teste', ST_SetSRID(ST_Point(-47.751, -15.644), 4326));

CREATE TABLE qgis_test.tb_test_double_pk
(
    pk DOUBLE PRECISION PRIMARY KEY,
    value VARCHAR(16),
    geom geometry
);
-- those values (pi, Euler's, and a third) will be truncated/rounded to fit
-- PostgreSQL's internal type size. DOUBLE PRECISION is IEEE-754 8 bytes (64 bit).
INSERT INTO qgis_test.tb_test_double_pk (pk, value, geom) VALUES
    (3.141592653589793238462643383279502884197169399375105820974944592307816406286, 'first teste', ST_SetSRID(ST_Point(-47.887, -15.864), 4326)),
    (2.718281828459045235360287471352662497757247093699959574966967627724076630353, 'second test', ST_SetSRID(ST_Point(-47.902, -15.763), 4326)),
    (1.333333333333333333333333333333333333333333333333333333333333333333333333333, 'third teste', ST_SetSRID(ST_Point(-47.751, -15.644), 4326));

